import { initializeApp } from "https://www.gstatic.com/firebasejs/9.6.1/firebase-app.js";
import { getFirestore, doc, getDoc, setDoc, updateDoc } from "https://www.gstatic.com/firebasejs/9.6.1/firebase-firestore.js";

// üîπ –î–∞–Ω–Ω—ã–µ Firebase
const firebaseConfig = {
    apiKey: "AIzaSyDqIDTQrS14wTLsh_jFkD0GZAmEEWW8TDk",
    authDomain: "cooker-62216.firebaseapp.com",
    projectId: "cooker-62216",
    storageBucket: "cooker-62216.firebasestorage.app",
    messagingSenderId: "994568659489",
    appId: "1:994568659489:web:18c15bc15fa5b723a03960"
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

// –ü–æ–ª—É—á–∞–µ–º `id` —Ä–µ—Ü–µ–ø—Ç–∞ –∏–∑ URL
const params = new URLSearchParams(window.location.search);
const receptId = params.get("id");

console.log("üîç –ü–æ–ª—É—á–µ–Ω–Ω—ã–π ID —Ä–µ—Ü–µ–ø—Ç–∞:", receptId);

// –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram Mini App
const userData = window.Telegram.WebApp.initDataUnsafe;
const userId = userData?.user?.id;
console.log("‚úÖ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userId);

if (!receptId) {
    showRecipeNotReady();
} else {
    loadRecipe(receptId);
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ü–µ–ø—Ç–∞
async function loadRecipe(receptId) {
    try {
        const receptMainId = `receptmain${receptId.replace("recept", "")}`;
        console.log("üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é:", receptMainId);

        const mainRef = doc(db, receptMainId, "main");
        const prodRef = doc(db, receptMainId, "prod");
        const stepRef = doc(db, receptMainId, "step");
        const photoRef = doc(db, receptMainId, "photo");

        const [mainSnap, prodSnap, stepSnap, photoSnap] = await Promise.all([
            getDoc(mainRef),
            getDoc(prodRef),
            getDoc(stepRef),
            getDoc(photoRef)
        ]);

        if (!mainSnap.exists()) {
            showRecipeNotReady();
            return;
        }

        const mainData = mainSnap.data();
        const prodData = prodSnap.exists() ? prodSnap.data() : {};
        const stepData = stepSnap.exists() ? stepSnap.data() : {};
        const photoData = photoSnap.exists() ? photoSnap.data() : {};

        console.log("‚úÖ –î–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", mainData);

        // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        document.getElementById("recipe-title").textContent = mainData.name || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è";
        document.getElementById("recipe-description").textContent = mainData.dis || "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç";
        document.getElementById("recipe-info").textContent = `–ü–æ—Ä—Ü–∏–∏: ${mainData.porcii} | –í—Ä–µ–º—è: ${mainData.timemin} –º–∏–Ω`;

        // ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ—Ç–æ —Ä–µ—Ü–µ–ø—Ç–∞
        const recipeImage = document.getElementById("recipe-image");
        recipeImage.src = photoData.url || "placeholder.jpg";

        // ‚úÖ –ü—Ä–æ–¥—É–∫—Ç—ã (—á–µ—Ä–µ–∑ —Ç–æ—á–∫—É)
        const ingredientsList = document.getElementById("recipe-ingredients");
        ingredientsList.innerHTML = "";

        let sortedKeys = Object.keys(prodData).sort((a, b) => {
            let numA = parseInt(a.split("-")[0]);
            let numB = parseInt(b.split("-")[0]);
            return numA - numB;
        });

        let ingredientsMap = {};
        sortedKeys.forEach((key) => {
            let baseKey = key.split("-")[0];
            if (!ingredientsMap[baseKey]) {
                ingredientsMap[baseKey] = prodData[key];
            } else {
                ingredientsMap[baseKey] += ` - ${prodData[key]}`;
            }
        });

        let ingredientsText = Object.values(ingredientsMap).join(". ") + ".";
        const p = document.createElement("p");
        p.textContent = ingredientsText;
        ingredientsList.appendChild(p);

        // ‚úÖ –®–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
        const stepsContainer = document.getElementById("recipe-steps");
        stepsContainer.innerHTML = "";
        Object.entries(stepData).forEach(([stepNum, stepText]) => {
            const stepDiv = document.createElement("div");
            stepDiv.classList.add("step");
            stepDiv.innerHTML = `
                <p class="step-title">–®–∞–≥ ${stepNum}:</p>
                <p class="step-description">${stepText}</p>
            `;
            stepsContainer.appendChild(stepDiv);
        });

        // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ", –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω—ã–π
        setupShowMoreButton();

        // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ—Ü–µ–ø—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
        updateFavoriteButton(userId, receptId);

    } catch (error) {
        console.error("üî• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ü–µ–ø—Ç–∞:", error);
        showRecipeNotReady();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
async function updateFavoriteButton(userId, receptId) {
    if (!userId) return;

    const userRef = doc(db, "person", String(userId));
    const userSnap = await getDoc(userRef);
    const favoriteBtn = document.getElementById("favorite-btn");

    if (userSnap.exists() && userSnap.data()[receptId]) {
        favoriteBtn.classList.add("active");
        favoriteBtn.textContent = "‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º";
    } else {
        favoriteBtn.classList.remove("active");
        favoriteBtn.textContent = "‚òÜ –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ";
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
async function toggleFavoriteRecipe() {
    if (!userId) return;

    const userRef = doc(db, "person", String(userId));
    const userSnap = await getDoc(userRef);
    const recipeName = document.getElementById("recipe-title").textContent;

    if (!userSnap.exists()) {
        await setDoc(userRef, { [receptId]: recipeName });
    } else {
        const userData = userSnap.data();
        if (userData.hasOwnProperty(receptId)) {
            delete userData[receptId];
            await setDoc(userRef, userData);
        } else {
            await updateDoc(userRef, { [receptId]: recipeName });
        }
    }
    updateFavoriteButton(userId, receptId);
}

// ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ"
function setupShowMoreButton() {
    const description = document.getElementById("recipe-description");
    const showMoreBtn = document.getElementById("show-more");

    if (!description || !showMoreBtn) return;

    if (description.scrollHeight > description.clientHeight) {
        showMoreBtn.style.display = "inline";
    } else {
        showMoreBtn.style.display = "none";
    }

    showMoreBtn.addEventListener("click", function () {
        description.classList.toggle("expanded");
        showMoreBtn.textContent = description.classList.contains("expanded") ? "–°–∫—Ä—ã—Ç—å" : "–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ";
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Ä–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
function showRecipeNotReady() {
    const title = document.getElementById("recipe-title");
    title.textContent = "–£–ø—Å.... –†–µ—Ü–µ–ø—Ç –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤(";
    title.style.textAlign = "center";
    title.style.fontSize = "20px";
    title.style.color = "#FF5733";

    document.getElementById("recipe-description").textContent = "–ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º!";
    document.getElementById("recipe-info").textContent = "";
    document.getElementById("recipe-ingredients").innerHTML = "";
    document.getElementById("recipe-steps").innerHTML = "";
}

// ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
document.getElementById("favorite-btn").addEventListener("click", toggleFavoriteRecipe);
