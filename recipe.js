import { initializeApp } from "https://www.gstatic.com/firebasejs/9.6.1/firebase-app.js";
import { getFirestore, doc, getDoc } from "https://www.gstatic.com/firebasejs/9.6.1/firebase-firestore.js";

// üîπ –î–∞–Ω–Ω—ã–µ Firebase
const firebaseConfig = {
    apiKey: "AIzaSyDqIDTQrS14wTLsh_jFkD0GZAmEEWW8TDk",
    authDomain: "cooker-62216.firebaseapp.com",
    projectId: "cooker-62216",
    storageBucket: "cooker-62216.firebasestorage.app",
    messagingSenderId: "994568659489",
    appId: "1:994568659489:web:18c15bc15fa5b723a03960"
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

// –ü–æ–ª—É—á–∞–µ–º `id` —Ä–µ—Ü–µ–ø—Ç–∞ –∏–∑ URL
const params = new URLSearchParams(window.location.search);
const receptId = params.get("id");

console.log("üîç –ü–æ–ª—É—á–µ–Ω–Ω—ã–π ID —Ä–µ—Ü–µ–ø—Ç–∞:", receptId);

if (!receptId) {
    showRecipeNotReady();
} else {
    loadRecipe(receptId);
}

async function loadRecipe(receptId) {
    try {
        const receptMainId = `receptmain${receptId.replace("recept", "")}`;

        const mainRef = doc(db, receptMainId, "main");
        const prodRef = doc(db, receptMainId, "prod");
        const stepRef = doc(db, receptMainId, "step");
        const photoRef = doc(db, receptMainId, "photo");
        const itemsRef = doc(db, receptMainId, "items");

        const [mainSnap, prodSnap, stepSnap, photoSnap, itemsSnap] = await Promise.all([
            getDoc(mainRef),
            getDoc(prodRef),
            getDoc(stepRef),
            getDoc(photoRef),
            getDoc(itemsRef)
        ]);

        if (!mainSnap.exists()) {
            showRecipeNotReady();
            return;
        }

        const mainData = mainSnap.data();
        const prodData = prodSnap.exists() ? prodSnap.data() : {}; // üîπ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        const stepData = stepSnap.exists() ? stepSnap.data() : {};
        const photoData = photoSnap.exists() ? photoSnap.data() : {};
        const itemsData = itemsSnap.exists() ? itemsSnap.data() : {};

        console.log("üìå –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç–∞:", { mainData, prodData, stepData, photoData, itemsData });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ sessionStorage
        sessionStorage.setItem("recipeMainData", JSON.stringify(mainData));
        sessionStorage.setItem("recipeProdData", JSON.stringify(prodData));
        sessionStorage.setItem("recipeStepData", JSON.stringify(stepData));

        // –í—ã–≤–æ–¥–∏–º –ø—Ä–æ–¥—É–∫—Ç—ã –∏ —à–∞–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
        console.log("üì¶ –ü—Ä–æ–¥—É–∫—Ç—ã —Ä–µ—Ü–µ–ø—Ç–∞:", prodData);
        console.log("üìã –®–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:", stepData);

        document.getElementById("recipe-title").textContent = mainData.name || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è";
        document.getElementById("recipe-description").textContent = mainData.dis || "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç";
        document.getElementById("recipe-info").textContent = `–ü–æ—Ä—Ü–∏–∏: ${mainData.porcii} | –í—Ä–µ–º—è: ${mainData.timemin} –º–∏–Ω`;
        document.getElementById("recipe-image").src = photoData.url || "placeholder.jpg";

        // üîπ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—É–¥—É –∏ —Ç–µ—Ö–Ω–∏–∫—É
        if (itemsSnap.exists()) {
            const itemsContainer = document.createElement("div");
            itemsContainer.classList.add("items-container");

            const title = document.createElement("h3");
            title.textContent = "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –ø–æ—Å—É–¥–∞ –∏ —Ç–µ—Ö–Ω–∏–∫–∞:";
            itemsContainer.appendChild(title);

            Object.values(itemsData).forEach((item) => {
                const itemBox = document.createElement("div");
                itemBox.classList.add("item-box");
                itemBox.textContent = item;
                itemsContainer.appendChild(itemBox);
            });

            document.getElementById("recipe-steps")?.after(itemsContainer);
        }

        // ‚úÖ –ü—Ä–æ–¥—É–∫—Ç—ã (—á–µ—Ä–µ–∑ —Ç–æ—á–∫—É)
        const ingredientsList = document.getElementById("recipe-ingredients");
        ingredientsList.innerHTML = "";

        let sortedKeys = Object.keys(prodData).sort((a, b) => {
            let numA = parseInt(a.split("-")[0]);
            let numB = parseInt(b.split("-")[0]);
            return numA - numB;
        });

        let ingredientsMap = {};
        sortedKeys.forEach((key) => {
            let baseKey = key.split("-")[0];
            if (!ingredientsMap[baseKey]) {
                ingredientsMap[baseKey] = prodData[key];
            } else {
                ingredientsMap[baseKey] += ` - ${prodData[key]}`;
            }
        });

        // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        ingredientsList.innerHTML = "";

        Object.values(ingredientsMap).forEach((ingredient) => {
            const li = document.createElement("li");
            li.textContent = ingredient;
            li.classList.add("ingredient-item"); // –ú–æ–∂–Ω–æ —Å—Ç–∏–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ CSS
            ingredientsList.appendChild(li);
        });

        // ‚úÖ –®–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
        const stepsContainer = document.getElementById("recipe-steps");
        stepsContainer.innerHTML = "";
        Object.entries(stepData).forEach(([stepNum, stepText]) => {
            const stepDiv = document.createElement("div");
            stepDiv.classList.add("step");

            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —à–∞–≥–∞
            const questionButton = document.createElement("span");
            questionButton.classList.add("question-button");
            questionButton.textContent = "?";

            // –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —à–∞–≥–∞ –∏ –∫–Ω–æ–ø–∫—É –≤–æ–ø—Ä–æ—Å–∞
            stepDiv.innerHTML = `
                <p class="step-title">–®–∞–≥ ${stepNum}:</p>
                <p class="step-description">${stepText}</p>
            `;

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —à–∞–≥
            stepDiv.appendChild(questionButton);

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
           questionButton.addEventListener("click", function () {
    try {
        const prompt = `–ü—Ä–∏–≤–µ—Ç! –í–æ—Ç –º–æ–π —Ä–µ—Ü–µ–ø—Ç: –ü—Ä–æ–¥—É–∫—Ç—ã: ${Object.values(ingredientsMap).join(". ")} –®–∞–≥–∏: ${Object.entries(stepData).map(([num, text]) => `–®–∞–≥ ${num}: ${text}`).join(". ")} –£ –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫ –≤–æ–ø—Ä–æ—Å –∏–º–µ–Ω–Ω–æ —Å —à–∞–≥–æ–º –Ω–æ–º–µ—Ä ${stepNum}: –í–æ—Ç –æ–Ω ${stepText}, —Ä–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –ø—Ä–æ –Ω–µ–≥–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ!`;

        sessionStorage.setItem("question", prompt);

        const encodedPrompt = encodeURIComponent(prompt);
        const maxUrlLength = 2000;

        if (encodedPrompt.length > maxUrlLength) {
            alert("–í–∞—à –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –µ–≥–æ.");
        } else {
            window.location.href = `help.html?prompt=${encodedPrompt}`;
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ help.html:", error);
        alert("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.");
    }
});


                // –ö–æ–¥–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ URL
                const encodedPrompt = encodeURIComponent(prompt);

                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É help.html —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º prompt
                // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ URL –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
                const maxUrlLength = 2000;
                if (encodedPrompt.length > maxUrlLength) {
                    alert("–í–∞—à –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –µ–≥–æ.");
                } else {
                    window.location.href = `help.html?prompt=${encodedPrompt}`;
                }
            });

            stepsContainer.appendChild(stepDiv);
        });

        setupShowMoreButton();

    } catch (error) {
        console.error("üî• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ü–µ–ø—Ç–∞:", error);
        showRecipeNotReady();
    }
}

// ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ"
function setupShowMoreButton() {
    const description = document.getElementById("recipe-description");
    const showMoreBtn = document.getElementById("show-more");

    if (!description || !showMoreBtn) return;

    if (description.scrollHeight > description.clientHeight) {
        showMoreBtn.style.display = "inline";
    } else {
        showMoreBtn.style.display = "none";
    }

    showMoreBtn.addEventListener("click", function () {
        description.classList.toggle("expanded");
        showMoreBtn.textContent = description.classList.contains("expanded") ? "–°–∫—Ä—ã—Ç—å" : "–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ";
    });
}

// ‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Ä–µ—Ü–µ–ø—Ç–∞
function createRecipeCard(recipe, recipeId) {
    const card = document.createElement("div");
    card.classList.add("recipe-card");

    card.innerHTML = `
        <img src="${recipe.url || 'placeholder.jpg'}" class="recipe-photo">
        <div class="recipe-info">
            <h3 class="recipe-title">${recipe.name}</h3>
            <p class="recipe-description">${recipe.dis}</p>
            <div class="recipe-actions">
                <button class="fav-btn" data-id="${recipeId}">‚ù§Ô∏è</button>
            </div>
        </div>
    `;

    card.addEventListener("click", () => {
        window.location.href = `recipe.html?id=${recipeId}`;
    });

    return card;
}
