import { db } from "./firebase-config.js";
import { collection, doc, setDoc, getDocs } from "https://www.gstatic.com/firebasejs/10.8.0/firebase-firestore.js";

const IMGBB_API_KEY = "6353a9ccc652efaad72bf6c7b2b4fbf3"; // –í—Å—Ç–∞–≤—å —Å–≤–æ–π –∫–ª—é—á –æ—Ç ImgBB

document.addEventListener("DOMContentLoaded", () => {
    const submitButton = document.querySelector(".submit-btn");

    submitButton?.addEventListener("click", async function () {
        try {
            console.log("–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞...");

            const nameInput = document.getElementById("recipe-name");
            const disInput = document.getElementById("short-description");
            const aboutInput = document.getElementById("about-recipe");
            const portionsInput = document.getElementById("portions");
            const timeInput = document.getElementById("time");
            const imageInput = document.getElementById("recipe-image");

            if (!nameInput || !disInput || !aboutInput || !portionsInput || !timeInput || !imageInput) {
                console.error("–û—à–∏–±–∫–∞: –æ–¥–∏–Ω –∏–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                return;
            }

            const name = nameInput.value;
            const dis = disInput.value.substring(0, 120);
            const about = aboutInput.value;
            const portions = portionsInput.value;
            const time = timeInput.value;
            const imageFile = imageInput.files[0];

            if (!imageFile) {
                console.error("–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ.");
                return;
            }

            // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ ImgBB
            console.log("–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ ImgBB...");
            const imageUrl = await uploadToImgBB(imageFile);
            console.log("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:", imageUrl);

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞
            const recRef = collection(db, "rec");
            const recSnapshot = await getDocs(recRef);
            const nextIndex = recSnapshot.size;
            const recDocName = recept${nextIndex};
            const receptMainName = receptmain${nextIndex};

            console.log("–°–æ–∑–¥–∞—ë–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ Firestore:", recDocName);
            await setDoc(doc(db, "rec", recDocName), { name, dis, image: imageUrl });

            console.log("–°–æ–∑–¥–∞—ë–º –∫–æ–ª–ª–µ–∫—Ü–∏—é:", receptMainName);
            await setDoc(doc(db, receptMainName, "main"), {
                dis: about,
                name,
                porcii: portions,
                timemin: time
            });

            await setDoc(doc(db, receptMainName, "photo"), { url: imageUrl });

            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
            let prodData = {};
            document.querySelectorAll("#product-list .product-item").forEach((product, index) => {
                const titleEl = product.querySelector("input:nth-of-type(1)");
                const weightEl = product.querySelector("input:nth-of-type(2)");

                if (titleEl && weightEl) {
                    const title = titleEl.value.trim();
                    const weight = weightEl.value.trim();
                    if (title && weight) {
                        prodData[${index + 1}] = title;
                        prodData[${index + 1}-1] = weight;
                    }
                }
            });
            console.log("‚úÖ –ü—Ä–æ–¥—É–∫—Ç—ã:", prodData);
            await setDoc(doc(db, receptMainName, "prod"), prodData);

            // –î–æ–±–∞–≤–ª—è–µ–º —à–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
            let stepData = {};
            document.querySelectorAll("#step-list .step-item input").forEach((step, index) => {
                if (step.value) {
                    stepData[${index + 1}] = step.value;
                }
            });
            console.log("‚úÖ –®–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:", stepData);
            await setDoc(doc(db, receptMainName, "step"), stepData);

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            async function saveCategory(selector, docName) {
                let categoryData = {};
                document.querySelectorAll(selector).forEach((btn, index) => {
                    categoryData[${index + 1}] = btn.textContent.trim();
                });
                console.log(‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ${docName}:, categoryData);
                await setDoc(doc(db, receptMainName, docName), categoryData);
            }

            await saveCategory(".filter-btn.selected", "type");
            await saveCategory(".category-btn.selected", "type2");
            await saveCategory(".tech-btn.selected", "items");

            console.log("üéâ –†–µ—Ü–µ–ø—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!");
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞:", error);
        }
    });

    // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ ImgBB
    async function uploadToImgBB(imageFile) {
        let formData = new FormData();
        formData.append("image", imageFile);

        const response = await fetch(https://api.imgbb.com/1/upload?key=${IMGBB_API_KEY}, {
            method: "POST",
            body: formData
        });

        const result = await response.json();
        if (result.success) {
            return result.data.url; // –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        } else {
            throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ ImgBB");
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    function setupMultiSelect(selector) {
        document.querySelectorAll(selector).forEach(btn => {
            btn.addEventListener("click", () => {
                console.log(üîπ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: ${btn.textContent.trim()});
                btn.classList.toggle("selected");

                if (btn.classList.contains("selected")) {
                    btn.style.backgroundColor = "#4CAF50"; // –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç
                    btn.style.color = "#fff";
                } else {
                    btn.style.backgroundColor = ""; // –í–µ—Ä–Ω—É—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ç–∏–ª—å
                    btn.style.color = "";
                }

                console.log(üìå ${btn.textContent.trim()} —Ç–µ–ø–µ—Ä—å ${btn.classList.contains("selected") ? "–≤—ã–±—Ä–∞–Ω" : "—Å–Ω—è—Ç"});
            });
        });
    }

    // –î–æ–∂–∏–¥–∞–µ–º—Å—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM –ø–µ—Ä–µ–¥ –Ω–∞–≤–µ—à–∏–≤–∞–Ω–∏–µ–º —Å–æ–±—ã—Ç–∏–π
    setTimeout(() => {
        setupMultiSelect(".filter-btn");   // –ü–µ—Ä–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (–∫–∞—Ä—É—Å–µ–ª—å)
        setupMultiSelect(".category-btn"); // –í—Ç–æ—Ä–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≥–æ—Ä—è—á–µ–µ, –∑–∞–∫—É—Å–∫–∏)
        setupMultiSelect(".tech-btn");    // –¢—Ä–µ—Ç—å—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ)
    }, 500);
});
