// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
import { db } from "./firebase-config.js";
import { collection, doc, setDoc, getDocs } from "https://www.gstatic.com/firebasejs/10.8.0/firebase-firestore.js";

document.addEventListener("DOMContentLoaded", () => {
    const submitButton = document.querySelector(".submit-btn");
    submitButton?.addEventListener("click", async function () {
        try {
            console.log("–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞...");

            const nameInput = document.getElementById("recipe-name");
            const disInput = document.getElementById("short-description");
            const aboutInput = document.getElementById("about-recipe");
            const portionsInput = document.getElementById("portions");
            const timeInput = document.getElementById("time");
            const imageUrlInput = document.getElementById("recipe-image");

            if (!nameInput || !disInput || !aboutInput || !portionsInput || !timeInput) {
                console.error("–û—à–∏–±–∫–∞: –æ–¥–∏–Ω –∏–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                return;
            }

            const name = nameInput.value;
            const dis = disInput.value.substring(0, 120);
            const about = aboutInput.value;
            const portions = portionsInput.value;
            const time = timeInput.value;
            const imageUrl = imageUrlInput ? imageUrlInput.value : "";

            const recRef = collection(db, "rec");
            const recSnapshot = await getDocs(recRef);
            const nextIndex = recSnapshot.size;
            const recDocName = `recept${nextIndex}`;

            console.log("–°–æ–∑–¥–∞—ë–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ rec:", recDocName);
            await setDoc(doc(db, "rec", recDocName), { name, dis, image: imageUrl });

            const receptMainName = `receptmain${nextIndex}`;
            console.log("–°–æ–∑–¥–∞—ë–º –∫–æ–ª–ª–µ–∫—Ü–∏—é:", receptMainName);

            await setDoc(doc(db, receptMainName, "main"), {
                dis: "–û —Ä–µ—Ü–µ–ø—Ç–µ",
                name,
                porcii: portions,
                timemin: time
            });

            await setDoc(doc(db, receptMainName, "photo"), { url: imageUrl });

            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
            let prodData = {};
            document.querySelectorAll("#product-list .product-item").forEach((product, index) => {
                const titleEl = product.querySelector("input:nth-of-type(1)");
                const weightEl = product.querySelector("input:nth-of-type(2)");

                console.log(`üü¢ –ù–∞–π–¥–µ–Ω –ø—Ä–æ–¥—É–∫—Ç ${index + 1}:`, titleEl?.value, weightEl?.value);

                if (titleEl && weightEl) {
                    const title = titleEl.value.trim();
                    const weight = weightEl.value.trim();
                    if (title && weight) {
                        prodData[`${index + 1}`] = title;
                        prodData[`${index + 1}-1`] = weight;
                    }
                }
            });
            console.log("‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π –æ–±—ä–µ–∫—Ç prodData:", prodData);
            await setDoc(doc(db, receptMainName, "prod"), prodData);

            // –î–æ–±–∞–≤–ª—è–µ–º —à–∞–≥–∏
            let stepData = {};
            document.querySelectorAll("#step-list .step-item input").forEach((step, index) => {
                if (step.value) {
                    stepData[`${index + 1}`] = step.value;
                }
            });
            console.log("–î–æ–±–∞–≤–ª—è–µ–º —à–∞–≥–∏:", stepData);
            await setDoc(doc(db, receptMainName, "step"), stepData);

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            async function saveCategory(selector, docName) {
                let categoryData = {};
                document.querySelectorAll(selector).forEach((btn, index) => {
                    categoryData[`${index + 1}`] = btn.textContent.trim();
                });
                console.log(`–î–æ–±–∞–≤–ª—è–µ–º ${docName}:`, categoryData);
                await setDoc(doc(db, receptMainName, docName), categoryData);
            }

            await saveCategory(".filter-btn.selected", "type");
            await saveCategory(".category-btn.selected", "type2");
            await saveCategory(".multi-btn.selected", "items");

            console.log("–†–µ—Ü–µ–ø—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!");
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞:", error);
        }
    });

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    function setupMultiSelect(selector) {
        document.querySelectorAll(selector).forEach(btn => {
            btn.addEventListener("click", () => {
                btn.classList.toggle("selected");
                console.log(`üîπ ${btn.textContent} ${btn.classList.contains("selected") ? "–≤—ã–±—Ä–∞–Ω" : "—Å–Ω—è—Ç"}`);
            });
        });
    }

    setupMultiSelect(".filter-btn");   // –ü–µ—Ä–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (–∫–∞—Ä—É—Å–µ–ª—å)
    setupMultiSelect(".category-btn"); // –í—Ç–æ—Ä–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≥–æ—Ä—è—á–µ–µ, –∑–∞–∫—É—Å–∫–∏)
    setupMultiSelect(".multi-btn");    // –¢—Ä–µ—Ç—å—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ)
});
