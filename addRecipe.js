import { db } from "./firebase-config.js";
import { collection, doc, setDoc, getDocs } from "https://www.gstatic.com/firebasejs/10.8.0/firebase-firestore.js";

const IMGBB_API_KEY = "6353a9ccc652efaad72bf6c7b2b4fbf3"; // –í—Å—Ç–∞–≤—å —Å–≤–æ–π –∫–ª—é—á –æ—Ç ImgBB
const TELEGRAM_BOT_TOKEN = "8028042723:AAEVS6TZ-2wTwBQXWDUu109Z3qIOBBzEbxA"; // –í—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
const TELEGRAM_CHAT_ID = "1217160426"; // –í—Å—Ç–∞–≤—å ID —á–∞—Ç–∞

document.addEventListener("DOMContentLoaded", () => {
    const submitButton = document.querySelector(".submit-btn");

    submitButton?.addEventListener("click", async function () {
    try {
        console.log("–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞...");

        const name = document.getElementById("recipe-name").value;
        const dis = document.getElementById("short-description").value.substring(0, 120);
        const about = document.getElementById("about-recipe").value;
        const portions = document.getElementById("portions").value;
        const time = document.getElementById("time").value;
        const imageFile = document.getElementById("recipe-image").files[0];

        if (!name || !dis || !about || !portions || !time || !imageFile) {
            console.error("–û—à–∏–±–∫–∞: –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –Ω–µ –≤—Å–µ –ø–æ–ª—è.");
            return;
        }

        console.log("–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ ImgBB...");
        const imageUrl = await uploadToImgBB(imageFile);
        console.log("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:", imageUrl);

        const nextIndex = await getNextRecipeNumber();
        const recDocName = `recept${nextIndex}`;
        const receptMainName = `receptmain${nextIndex}`;

        console.log("–°–æ–∑–¥–∞—ë–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ Firestore:", recDocName);
        await setDoc(doc(db, "p_rec", recDocName), { name, dis, image: imageUrl, status: "pending" });

        console.log("–°–æ–∑–¥–∞—ë–º –∫–æ–ª–ª–µ–∫—Ü–∏—é:", receptMainName);
        await setDoc(doc(db, receptMainName, "main"), { dis: about, name, porcii: portions, timemin: time });

        await setDoc(doc(db, receptMainName, "photo"), { url: imageUrl });

        // üìå –ü—Ä–æ–¥—É–∫—Ç—ã
        let prodData = {};
        document.querySelectorAll("#product-list .product-item").forEach((product, index) => {
            const title = product.querySelector("input:nth-of-type(1)").value.trim();
            const weight = product.querySelector("input:nth-of-type(2)").value.trim();
            if (title && weight) {
                prodData[`${index + 1}`] = title;
                prodData[`${index + 1}-1`] = weight;
            }
        });
        console.log("‚úÖ –ü—Ä–æ–¥—É–∫—Ç—ã:", prodData);
        await setDoc(doc(db, receptMainName, "prod"), prodData);

        // üìå –®–∞–≥–∏
        let stepData = {};
        document.querySelectorAll("#step-list .step-item input").forEach((step, index) => {
            if (step.value) {
                stepData[`${index + 1}`] = step.value;
            }
        });
        console.log("‚úÖ –®–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:", stepData);
        await setDoc(doc(db, receptMainName, "step"), stepData);

        // üìå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (type, type2, items)
        let type = [];
        document.querySelectorAll(".filter-btn.selected").forEach(btn => {
            type.push(btn.textContent.trim());
        });

        let type2 = [];
        document.querySelectorAll(".category-btn.selected").forEach(btn => {
            type2.push(btn.textContent.trim());
        });

        let items = [];
        document.querySelectorAll(".tech-btn.selected").forEach(btn => {
            items.push(btn.textContent.trim());
        });

        console.log("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (type):", type);
        console.log("‚úÖ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (type2):", type2);
        console.log("‚úÖ –¢–µ—Ö–Ω–∏–∫–∞ (items):", items);

        await setDoc(doc(db, receptMainName, "categories"), { type, type2, items });

        await sendToTelegram(nextIndex, name, dis, about, time, portions, prodData, stepData, type, type2, items, imageUrl);

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞:", error);
    }
});


    async function getNextRecipeNumber() {
        const usedNumbers = new Set();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –≤ p_rec
        const pRecSnapshot = await getDocs(collection(db, "p_rec"));
        pRecSnapshot.forEach((doc) => {
            const match = doc.id.match(/^recept(\d+)$/);
            if (match) usedNumbers.add(parseInt(match[1]));
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –≤ rec
        const recSnapshot = await getDocs(collection(db, "rec"));
        recSnapshot.forEach((doc) => {
            const match = doc.id.match(/^recept(\d+)$/);
            if (match) usedNumbers.add(parseInt(match[1]));
        });

        let newNumber = 1;
        while (usedNumbers.has(newNumber)) {
            newNumber += 1;
        }

        return newNumber;
    }

    async function uploadToImgBB(imageFile) {
        let formData = new FormData();
        formData.append("image", imageFile);
        const response = await fetch(`https://api.imgbb.com/1/upload?key=${IMGBB_API_KEY}`, { method: "POST", body: formData });
        const result = await response.json();
        if (result.success) {
            return result.data.url;
        } else {
            throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ ImgBB");
        }
    }

    async function sendToTelegram(recipeId, name, dis, about, time, portions, prodData, stepData, imageUrl) {
        const message = `üìå <b>–ù–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é</b>\n\n`
            + `üçΩ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> ${name}\n`
            + `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${dis}\n`
            + `üìñ <b>–û —Ä–µ—Ü–µ–ø—Ç–µ:</b> ${about}\n`
            + `‚è≥ <b>–í—Ä–µ–º—è:</b> ${time} –º–∏–Ω\n`
            + `üç¥ <b>–ü–æ—Ä—Ü–∏–∏:</b> ${portions}\n\n`
            + `üìå <b>–®–∞–≥–∏:</b>\n${Object.entries(stepData).map(([key, value]) => `‚û°Ô∏è ${key}. ${value}`).join("\n")}`;

        const telegramUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendPhoto`;

        await fetch(telegramUrl, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                chat_id: TELEGRAM_CHAT_ID,
                photo: imageUrl,
                caption: message,
                parse_mode: "HTML",
                reply_markup: {
                    inline_keyboard: [
                        [{ text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data: `approve_${recipeId}` }],
                        [{ text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data: `reject_${recipeId}` }]
                    ]
                }
            })
        });
    }
});




    function setupMultiSelect(selector) {
        document.querySelectorAll(selector).forEach(btn => {
            btn.addEventListener("click", () => {
                console.log(`üîπ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: ${btn.textContent.trim()}`);
                btn.classList.toggle("selected");

                if (btn.classList.contains("selected")) {
                    btn.style.backgroundColor = "#4CAF50"; // –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç
                    btn.style.color = "#fff";
                } else {
                    btn.style.backgroundColor = ""; // –í–µ—Ä–Ω—É—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ç–∏–ª—å
                    btn.style.color = "";
                }

                console.log(`üìå ${btn.textContent.trim()} —Ç–µ–ø–µ—Ä—å ${btn.classList.contains("selected") ? "–≤—ã–±—Ä–∞–Ω" : "—Å–Ω—è—Ç"}`);

            });
        });
    }

    // –î–æ–∂–∏–¥–∞–µ–º—Å—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM –ø–µ—Ä–µ–¥ –Ω–∞–≤–µ—à–∏–≤–∞–Ω–∏–µ–º —Å–æ–±—ã—Ç–∏–π
    setTimeout(() => {
        setupMultiSelect(".filter-btn");   // –ü–µ—Ä–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (–∫–∞—Ä—É—Å–µ–ª—å)
        setupMultiSelect(".category-btn"); // –í—Ç–æ—Ä–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≥–æ—Ä—è—á–µ–µ, –∑–∞–∫—É—Å–∫–∏)
        setupMultiSelect(".tech-btn");    // –¢—Ä–µ—Ç—å—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ)
    }, 500);

