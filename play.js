import { db } from "./firebase-config.js";
import { collection, doc, setDoc, getDocs, getDoc } from "https://www.gstatic.com/firebasejs/10.8.0/firebase-firestore.js";

let cachedProducts = [];
document.addEventListener("DOMContentLoaded", async () => {
    await loadProducts();
    setupAutocompleteForExistingInputs();
    setupMultiSelect(".equipment-btn"); // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
});
document.querySelector(".recipe-btn").addEventListener("click", async () => {
    const selectedProducts = [...document.querySelectorAll("#product-list .product-item input[type='text']")]
        .map(input => input.value.trim())
        .filter(value => value);

    if (selectedProducts.length === 0) {
        alert("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç!");
        return;
    }

    console.log("üìå –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:", selectedProducts);
    const recipesContainer = document.getElementById("recipes");
    recipesContainer.innerHTML = "";

    let foundRecipes = []; // –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –≤ Firestore
    for (let i = 0; i < 100; i++) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 100 —Ä–µ—Ü–µ–ø—Ç–æ–≤
        const recipeMainRef = collection(db, `receptmain${i}`);
        const prodDoc = await getDoc(doc(recipeMainRef, "prod"));

        if (!prodDoc.exists()) continue;

        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã (–±–µ–∑ –≥—Ä–∞–º–º–æ–≤–∫–∏)
        const recipeProducts = Object.values(prodDoc.data()).filter(value => !value.includes("–≥.") && !value.includes("—à—Ç."));
        console.log(`üîç –†–µ—Ü–µ–ø—Ç receptmain${i} —Å–æ–¥–µ—Ä–∂–∏—Ç:`, recipeProducts);

        if (selectedProducts.every(product => recipeProducts.includes(product))) {
            console.log(`‚úÖ –†–µ—Ü–µ–ø—Ç receptmain${i} –ø–æ–¥—Ö–æ–¥–∏—Ç!`);
            foundRecipes.push(`recept${i}`);

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç–∞
            const mainDoc = await getDoc(doc(recipeMainRef, "main"));
            if (!mainDoc.exists()) continue;

            const recipeData = mainDoc.data();
            recipesContainer.appendChild(createRecipeCard(recipeData, i));
        }
    }

    if (foundRecipes.length === 0) {
        recipesContainer.innerHTML = "<p>‚ùå –ù–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏</p>";
    }
});

document.getElementById("add-product").addEventListener("click", () => {
    const productList = document.getElementById("product-list");

    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    const newProductItem = document.createElement("div");
    newProductItem.classList.add("product-item");

    // –ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
    const newInput = document.createElement("input");
    newInput.type = "text";
    newInput.placeholder = "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç...";

    // –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    const quantityInput = document.createElement("input");
    quantityInput.type = "text";
    quantityInput.placeholder = "–≥—Ä–∞–º–º/—à—Ç—É–∫";
    quantityInput.classList.add("quantity-input");

    // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
    const deleteButton = document.createElement("button");
    deleteButton.textContent = "‚ùå";
    deleteButton.classList.add("delete-btn");
    deleteButton.addEventListener("click", () => {
        productList.removeChild(newProductItem);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–¥—É–∫—Ç–∞
    newProductItem.appendChild(newInput);
    newProductItem.appendChild(quantityInput);
    newProductItem.appendChild(deleteButton);
    productList.appendChild(newProductItem);

    // –î–æ–∂–∏–¥–∞–µ–º—Å—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ DOM –∏ –≤–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
    setTimeout(() => {
        console.log("üÜï –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ, –≤–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ...");
        setupAutocomplete(newInput);
    }, 100);
});

// ‚ö° –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –∫—ç—à –∏–∑ Firestore
async function loadProducts() {
    console.log("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –∫—ç—à...");
    cachedProducts = []; // –û—á–∏—â–∞–µ–º –∫—ç—à –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π

    for (let i = 1; i <= 18; i++) {
        const docRef = doc(db, "products", `${i}`);
        const docSnap = await getDoc(docRef);
        if (docSnap.exists()) {
            cachedProducts.push(...Object.values(docSnap.data()));
            console.log("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫—ç—à:", Object.values(docSnap.data()));

        }
    }
    console.log("‚úÖ –ü—Ä–æ–¥—É–∫—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –∫—ç—à:", cachedProducts);
}

// üîç –ò—â–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –∫—ç—à–µ
function searchProducts(query) {
    if (query.length < 2) return [];
    return cachedProducts.filter(name => name.toLowerCase().startsWith(query.toLowerCase()));
}

// ‚ú® –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
function setupAutocomplete(inputField) {
    const suggestionBox = document.createElement("div");
    suggestionBox.classList.add("suggestions");
    inputField.parentNode.appendChild(suggestionBox);

    inputField.addEventListener("input", () => {
        const query = inputField.value.trim();
        suggestionBox.innerHTML = "";

        if (query.length < 2) return;

        const results = searchProducts(query);
        console.log(`üìã –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è ${query}:`, results);

        results.forEach(product => {
            const item = document.createElement("div");
            item.classList.add("suggestion-item");
            item.textContent = product;
            item.addEventListener("click", () => {
                inputField.value = product;
                suggestionBox.innerHTML = "";
            });
            suggestionBox.appendChild(item);
        });
    });

    document.addEventListener("click", (e) => {
        if (!suggestionBox.contains(e.target) && e.target !== inputField) {
            suggestionBox.innerHTML = "";
        }
    });
}

// üîÑ –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π
function setupAutocompleteForExistingInputs() {
    document.querySelectorAll("#product-list .product-item input[type='text']").forEach(setupAutocomplete);
}

// üîò –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –∫–Ω–æ–ø–æ–∫
function setupMultiSelect(selector) {
    document.querySelectorAll(selector).forEach(btn => {
        btn.addEventListener("click", (event) => {
            event.target.classList.toggle("selected");
        });
    });
}
function createRecipeCard(recipeData, recipeId) {
    const recipeCard = document.createElement("div");
    recipeCard.classList.add("recipe-card");

    recipeCard.innerHTML = `
        <img src="${recipeData.photo || 'default.jpg'}" alt="${recipeData.name}">
        <h3>${recipeData.name}</h3>
        <p>${recipeData.dis}</p>
        <p><strong>–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:</strong> ${recipeData.timemin} –º–∏–Ω</p>
        <p><strong>–ü–æ—Ä—Ü–∏–∏:</strong> ${recipeData.porcii}</p>
        <button class="open-recipe" data-id="${recipeId}">–û—Ç–∫—Ä—ã—Ç—å —Ä–µ—Ü–µ–ø—Ç</button>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫—Ä—ã—Ç—å —Ä–µ—Ü–µ–ø—Ç"
    recipeCard.querySelector(".open-recipe").addEventListener("click", () => {
        window.location.href = `recipe.html?id=${recipeId}`;
    });

    return recipeCard;
}
