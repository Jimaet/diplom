// üîπ –ò–º–ø–æ—Ä—Ç Firebase üîπ
import { initializeApp } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js";
import { getFirestore, doc, setDoc, getDoc, updateDoc, arrayUnion, arrayRemove, collection, getDocs } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js";

// üîπ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Firebase üîπ
const firebaseConfig = {
    apiKey: "AIzaSyDqIDTQrS14wTLsh_jFkD0GZAmEEWW8TDk",
    authDomain: "cooker-62216.firebaseapp.com",
    projectId: "cooker-62216",
    storageBucket: "cooker-62216.firebasestorage.app",
    messagingSenderId: "994568659489",
    appId: "1:994568659489:web:18c15bc15fa5b723a03960"
};

// üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase üîπ
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

// –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ Telegram Web Apps
let userId = window.Telegram?.WebApp?.initDataUnsafe?.user?.id || "guest";

console.log("üü¢ User ID:", userId);
document.addEventListener("DOMContentLoaded", function () {
    if (window.Telegram && Telegram.WebApp) {
        Telegram.WebApp.ready();
        console.log("‚úÖ Telegram API –∑–∞–≥—Ä—É–∂–µ–Ω!");
        console.log("üü¢ initDataUnsafe:", Telegram.WebApp.initDataUnsafe);
        
        const user = Telegram.WebApp.initDataUnsafe?.user;
        if (user && user.id) {
            console.log("üü¢ User ID:", user.id);
        } else {
            console.warn("‚ö†Ô∏è User ID –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–µ—Ä–æ—è—Ç–Ω–æ, API –Ω–µ –ø–µ—Ä–µ–¥–∞—ë—Ç –¥–∞–Ω–Ω—ã–µ.");
        }
    } else {
        console.error("‚ùå Telegram API –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω! Mini App –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ?");
    }
});

// üîπ –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –µ—Å—Ç—å –ª–∏ —Ä–µ—Ü–µ–ø—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º üîπ
async function checkIfFavourite(recipeId, button) {
    const userRef = doc(db, "user", userId);
    const userSnap = await getDoc(userRef);

    if (userSnap.exists() && userSnap.data().favourites?.includes(recipeId)) {
        button.classList.add("active"); // –ö—Ä–∞—Å–Ω–æ–µ —Å–µ—Ä–¥–µ—á–∫–æ
    } else {
        button.classList.remove("active"); // –ë–µ–ª–æ–µ —Å–µ—Ä–¥–µ—á–∫–æ
    }
}

// üîπ –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ üîπ
async function toggleFavourite(event) {
    const button = event.target;
    const recipeId = button.dataset.id;
    const userRef = doc(db, "user", userId);

    try {
        const userSnap = await getDoc(userRef);
        let favRecipes = userSnap.exists() ? userSnap.data().favourites || [] : [];

        if (favRecipes.includes(recipeId)) {
            // –£–¥–∞–ª—è–µ–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
            await updateDoc(userRef, {
                favourites: arrayRemove(recipeId)
            });
            button.classList.remove("active");
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
            await updateDoc(userRef, {
                favourites: arrayUnion(recipeId)
            });
            button.classList.add("active");
            button.classList.add("heart-pop"); // –ê–Ω–∏–º–∞—Ü–∏—è
            setTimeout(() => button.classList.remove("heart-pop"), 300);
        }
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:", error);
    }
}

// üîπ –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤ üîπ
async function loadRecipes() {
    const recipesContainer = document.getElementById("recipes-container");
    if (!recipesContainer) {
        console.error("‚ùå –û—à–∏–±–∫–∞: recipes-container –Ω–µ –Ω–∞–π–¥–µ–Ω!");
        return;
    }

    recipesContainer.innerHTML = ""; // –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π

    console.log("üîπ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤...");

    const recipesQuery = collection(db, "rec");
    const querySnapshot = await getDocs(recipesQuery);

    let loadedRecipes = new Set();

    querySnapshot.forEach(async (doc) => {
        const data = doc.data();
        const recipeId = doc.id;
        const imageUrl = data.image ? data.image : "placeholder.jpg";

        if (loadedRecipes.has(recipeId)) return;
        loadedRecipes.add(recipeId);

        const recipeCard = document.createElement("div");
        recipeCard.classList.add("recipe-card");

        recipeCard.innerHTML = `
            <img src="${imageUrl}" class="recipe-img" alt="${data.name}">
            <div class="recipe-info">
                <h3 class="recipe-title">${data.name}</h3>
                <p class="recipe-description">${data.dis}</p>
            </div>
            <button class="favorite-button" data-id="${recipeId}">‚ù§Ô∏è</button>
            <a href="recipe.html?id=${recipeId}" class="recipe-link">
                <button class="start-button">–ù–∞—á–∞—Ç—å!</button>
            </a>
        `;

        const favButton = recipeCard.querySelector(".favorite-button");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ä–µ—Ü–µ–ø—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
        await checkIfFavourite(recipeId, favButton);

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
        favButton.addEventListener("click", toggleFavourite);

        recipesContainer.appendChild(recipeCard);
    });

    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤: ${loadedRecipes.size}`);
}

// üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã üîπ
document.addEventListener("DOMContentLoaded", loadRecipes);

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É Favourite
const favButton = document.querySelector(".nav-btn:nth-child(2)");
if (favButton) {
    favButton.addEventListener("click", () => {
        window.location.href = "favourites.html";
    });
} else {
    console.error("‚ùå –û—à–∏–±–∫–∞: –ö–Ω–æ–ø–∫–∞ 'Favourite' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
}
document.addEventListener("DOMContentLoaded", () => {
    const avatarButton = document.querySelector(".avatar");

    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram Mini App
    const userId = window.Telegram.WebApp.initDataUnsafe?.user?.id;

    if (!userId) {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        return;
    }

    avatarButton.addEventListener("click", () => {
        window.location.href = `profile.html?id=${userId}`;
    });
});
document.getElementById("my-recipes-btn").addEventListener("click", () => {
    window.location.href = "create.html";
});
let homeButton = document.querySelector(".nav-btn:first-child");
let lastClickTime = 0;

if (homeButton) {
    homeButton.addEventListener("click", () => {
        let currentTime = new Date().getTime();
        if (currentTime - lastClickTime < 1000) {
            location.reload();
        } else {
            window.scrollTo({ top: 0, behavior: "smooth" });
        }
        lastClickTime = currentTime;
    });
}
// üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É üîπ
async function searchRecipes(event) {
    const searchTerm = event.target.value.toLowerCase();
    const recipesContainer = document.getElementById("recipes-container");

    // –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    recipesContainer.innerHTML = "";

    // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–∞—è, –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã
    if (!searchTerm) {
        loadRecipes();
        return;
    }

    console.log("üîπ –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É:", searchTerm);

    // –ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤
    const recipesQuery = collection(db, "rec");
    const querySnapshot = await getDocs(recipesQuery);

    let loadedRecipes = new Set();

    querySnapshot.forEach(async (doc) => {
        const data = doc.data();
        const recipeId = doc.id;
        const recipeName = data.name.toLowerCase(); // –ü—Ä–∏–≤–æ–¥–∏–º –∏–º—è —Ä–µ—Ü–µ–ø—Ç–∞ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        const recipeDescription = data.dis.toLowerCase(); // –ü—Ä–∏–≤–æ–¥–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É

        // –ï—Å–ª–∏ –∏–º—è –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–æ–∫—É –ø–æ–∏—Å–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ü–µ–ø—Ç –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        if (recipeName.includes(searchTerm) || recipeDescription.includes(searchTerm)) {
            if (loadedRecipes.has(recipeId)) return;
            loadedRecipes.add(recipeId);

            const imageUrl = data.image ? data.image : "placeholder.jpg";

            const recipeCard = document.createElement("div");
            recipeCard.classList.add("recipe-card");

            recipeCard.innerHTML = `
                <img src="${imageUrl}" class="recipe-img" alt="${data.name}">
                <div class="recipe-info">
                    <h3 class="recipe-title">${data.name}</h3>
                    <p class="recipe-description">${data.dis}</p>
                </div>
                <button class="favorite-button" data-id="${recipeId}">‚ù§Ô∏è</button>
                <a href="recipe.html?id=${recipeId}" class="recipe-link">
                    <button class="start-button">–ù–∞—á–∞—Ç—å!</button>
                </a>
            `;

            const favButton = recipeCard.querySelector(".favorite-button");

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ä–µ—Ü–µ–ø—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
            await checkIfFavourite(recipeId, favButton);

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
            favButton.addEventListener("click", toggleFavourite);

            recipesContainer.appendChild(recipeCard);
        }
    });

    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É: ${loadedRecipes.size}`);
}

// üîπ –°–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–µ –ø–æ–∏—Å–∫–∞ üîπ
const searchInput = document.querySelector(".search-bar input");
if (searchInput) {
    searchInput.addEventListener("input", searchRecipes);
} else {
    console.error("‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!");
}
