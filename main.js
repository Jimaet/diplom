// üîπ –ò–º–ø–æ—Ä—Ç Firebase üîπ
import { initializeApp } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js";
import { getFirestore, collection, getDocs } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js";
document.addEventListener("DOMContentLoaded", function () {
    function enableCarouselScrolling(carousel) {
        let isDown = false;
        let startX;
        let scrollLeft;

        carousel.addEventListener("mousedown", (e) => {
            isDown = true;
            startX = e.pageX - carousel.offsetLeft;
            scrollLeft = carousel.scrollLeft;
            carousel.style.scrollBehavior = "auto";
        });

        carousel.addEventListener("mouseleave", () => {
            isDown = false;
        });

        carousel.addEventListener("mouseup", () => {
            isDown = false;
        });

        carousel.addEventListener("mousemove", (e) => {
            if (!isDown) return;
            e.preventDefault();
            const x = e.pageX - carousel.offsetLeft;
            const walk = (x - startX) * 2;
            carousel.scrollLeft = scrollLeft - walk;
        });

        // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Å–≤–∞–π–ø–∞ (–ø–ª–∞–≤–Ω–∞—è)
        let touchStartX = 0;
        let touchEndX = 0;

        carousel.addEventListener("touchstart", (e) => {
            touchStartX = e.touches[0].clientX;
            carousel.style.scrollBehavior = "auto";
        });

        carousel.addEventListener("touchmove", (e) => {
            touchEndX = e.touches[0].clientX;
            let moveX = touchStartX - touchEndX;
            carousel.scrollLeft += moveX * 1.5;
            touchStartX = touchEndX;
        });

        carousel.addEventListener("touchend", () => {
            carousel.style.scrollBehavior = "smooth";
        });
    }

    const carousels = document.querySelectorAll(".carousel-container");
    carousels.forEach(enableCarouselScrolling);
});
// üîπ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Firebase (—ç—Ç–æ –æ—Å—Ç–∞—ë—Ç—Å—è –≤ –∫–æ–¥–µ, –Ω–æ —Å–∫—Ä—ã—Ç—å –∫–ª—é—á–∏ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ backend) üîπ
const firebaseConfig = {
    apiKey: "AIzaSyDqIDTQrS14wTLsh_jFkD0GZAmEEWW8TDk",
    authDomain: "cooker-62216.firebaseapp.com",
    projectId: "cooker-62216",
    storageBucket: "cooker-62216.firebasestorage.app",
    messagingSenderId: "994568659489",
    appId: "1:994568659489:web:18c15bc15fa5b723a03960"
};

// üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase üîπ
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

// üîπ –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤ üîπ
async function loadRecipe() {
    const urlParams = new URLSearchParams(window.location.search);
    const recipeId = urlParams.get("id");
    if (!recipeId) {
        console.error("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç ID —Ä–µ—Ü–µ–ø—Ç–∞!");
        return;
    }

    const recipeRef = collection(db, recipeId); // –ö–æ–ª–ª–µ–∫—Ü–∏—è —Ä–µ—Ü–µ–ø—Ç–∞
    const mainDoc = await getDocs(recipeRef);
    
    let recipeData = {};
    let prodData = {};

    mainDoc.forEach((doc) => {
        if (doc.id === "main") {
            recipeData = doc.data();
        } else if (doc.id === "prod") {
            prodData = doc.data();
        }
    });

    if (!recipeData || Object.keys(recipeData).length === 0) {
        console.error("‚ùå –û—à–∏–±–∫–∞: —Ä–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!");
        return;
    }

    // üìå –§–æ—Ç–æ —Ä–µ—Ü–µ–ø—Ç–∞
    const recipeImage = document.getElementById("recipe-image");
    recipeImage.src = recipeData.photo || "placeholder.jpg";

    // üìå –ù–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
    document.getElementById("recipe-title").innerText = recipeData.name;
    document.getElementById("recipe-description").innerText = recipeData.dis;
    document.getElementById("recipe-info").innerText = 
        `–ü–æ—Ä—Ü–∏–∏: ${recipeData.porcii} | –í—Ä–µ–º—è: ${recipeData.timemin} –º–∏–Ω`;

    // üìå –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    const ingredientsContainer = document.getElementById("recipe-ingredients");
    ingredientsContainer.innerHTML = "";

    let sortedKeys = Object.keys(prodData).sort((a, b) => {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–∫, —á—Ç–æ–±—ã 1-1 —à–ª–æ –ø–æ—Å–ª–µ 1
        let numA = parseInt(a.split("-")[0], 10);
        let numB = parseInt(b.split("-")[0], 10);
        return numA - numB;
    });

    let usedKeys = new Set();
    sortedKeys.forEach((key) => {
        if (key.includes("-")) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–ª—é—á–∏ –≤–∏–¥–∞ 1-1, 2-2, —Ç.–∫. –æ–Ω–∏ –¥–æ–±–∞–≤—è—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏
        let product = prodData[key];
        let quantity = prodData[key + "-1"] || ""; // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥—Ä–∞–º–º–æ–≤–∫–∞
        let ingredient = `${product} - ${quantity}`;

        if (!usedKeys.has(key)) {
            ingredientsContainer.innerHTML += `<p>${ingredient}</p>`;
            usedKeys.add(key);
        }
    });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ä–µ—Ü–µ–ø—Ç–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener("DOMContentLoaded", loadRecipe);
// –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ä–µ—Ü–µ–ø—Ç–æ–≤

// üîπ –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–∫–∞—Ä—É—Å–µ–ª—å) üîπ
function loadCategoryCarousel() {
    const categoryContainer = document.querySelector(".category-carousel .carousel");

    const categories = [
        { name: "–ó–∞–∫—É—Å–∫–∏", image: "k2/zakyski.jpg" },
        { name: "–°–∞–ª–∞—Ç—ã", image: "k2/salat.jpg" },
        { name: "–î–µ—Å–µ—Ä—Ç—ã", image: "k2/desert.jpg" },
        { name: "–í—ã–ø–µ—á–∫–∞", image: "k2/vipechka.jpg" },
        { name: "–ù–∞–ø–∏—Ç–∫–∏", image: "k2/napitki.jpg" },
        { name: "–§–∞—Å—Ç—Ñ—É–¥", image: "k2/fastfod.jpg" },
        { name: "–ì–∞—Ä–Ω–∏—Ä", image: "k2/garnir.jpg" },
        { name: "–ì–æ—Ä—è—á–µ–µ", image: "k2/goryachee.jpg" },
        { name: "–°–æ—É—Å—ã", image: "k2/sousi.jpg" }
    ];

    categoryContainer.innerHTML = ""; // –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π

    categories.forEach(category => {
        const categoryBtn = document.createElement("button");
        categoryBtn.classList.add("category-btn");

        categoryBtn.innerHTML = `
            <img src="${category.image}" alt="${category.name}">
            <span>${category.name}</span>
        `;

        categoryContainer.appendChild(categoryBtn);
    });
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener("DOMContentLoaded", () => {
    loadRecipes();
    loadCategoryCarousel();
});

