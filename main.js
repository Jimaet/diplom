// üîπ –ò–º–ø–æ—Ä—Ç Firebase üîπ
import { initializeApp } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js";
import { getFirestore, doc, collection, getDocs } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js";

// üîπ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Firebase üîπ
const firebaseConfig = {
    apiKey: "AIzaSyDqIDTQrS14wTLsh_jFkD0GZAmEEWW8TDk",
    authDomain: "cooker-62216.firebaseapp.com",
    projectId: "cooker-62216",
    storageBucket: "cooker-62216.firebasestorage.app",
    messagingSenderId: "994568659489",
    appId: "1:994568659489:web:18c15bc15fa5b723a03960"
};

// üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase üîπ
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

// üîπ –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ üîπ
const selectedFilters = {
    type: new Set(),
    type2: new Set(),
};

// üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ üîπ
document.querySelectorAll(".filter-btn").forEach((btn) => {
    btn.addEventListener("click", () => {
        const filterValue = btn.textContent.trim();

        if (selectedFilters.type.has(filterValue)) {
            selectedFilters.type.delete(filterValue); // –£–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
        } else {
            selectedFilters.type.add(filterValue); // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä
        }

        loadRecipes(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
    });
});

// üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º üîπ
document.querySelectorAll(".category-btn").forEach((btn) => {
    btn.addEventListener("click", () => {
        const filterValue = btn.querySelector("span").textContent.trim();

        if (selectedFilters.type2.has(filterValue)) {
            selectedFilters.type2.delete(filterValue);
        } else {
            selectedFilters.type2.add(filterValue);
        }

        loadRecipes(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
    });
});

// üîπ –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ üîπ
async function loadRecipes() {
    const recipesContainer = document.getElementById("recipes-container");
    if (!recipesContainer) {
        console.error("‚ùå –û—à–∏–±–∫–∞: recipes-container –Ω–µ –Ω–∞–π–¥–µ–Ω!");
        return;
    }

    recipesContainer.innerHTML = ""; // –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π

    console.log("üîπ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤...");

    const recipesQuery = collection(db, "rec");
    const querySnapshot = await getDocs(recipesQuery);

    let loadedRecipes = new Set();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    querySnapshot.forEach(async (doc) => {
        const recipeId = doc.id;
        const recipeData = doc.data();

        let isMatch = false; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞–º

        for (let i = 0; i < 10; i++) { // –ü—Ä–æ–π–¥–µ–º –ø–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º receptmainX
            const receptmainDoc = await getDoc(doc(db, "receptmain" + i, recipeId));
            if (!receptmainDoc.exists()) continue; // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –µ—Å–ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

            const data = receptmainDoc.data();
            const typeMatches = selectedFilters.type.size === 0 || selectedFilters.type.has(data.type);
            const type2Matches = selectedFilters.type2.size === 0 || selectedFilters.type2.has(data.type2);

            if (typeMatches && type2Matches) {
                isMatch = true;
                break;
            }
        }

        if (isMatch) {
            const imageUrl = recipeData.image || "placeholder.jpg";

            const recipeCard = document.createElement("div");
            recipeCard.classList.add("recipe-card");

            recipeCard.innerHTML = `
                <img src="${imageUrl}" class="recipe-img" alt="${recipeData.name}">
                <div class="recipe-info">
                    <h3 class="recipe-title">${recipeData.name}</h3>
                    <p class="recipe-description">${recipeData.dis}</p>
                </div>
                <a href="recipe.html?id=${recipeId}" class="recipe-link">
                    <button class="start-button">–ù–∞—á–∞—Ç—å!</button>
                </a>
            `;

            recipesContainer.appendChild(recipeCard);
            loadedRecipes.add(recipeId);
        }
    });

    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤: ${loadedRecipes.size}`);
}

// üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã üîπ
document.addEventListener("DOMContentLoaded", loadRecipes);

// üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ Home üîπ
document.addEventListener("DOMContentLoaded", () => {
    const homeButton = document.querySelector(".nav-btn:first-child"); // –ö–Ω–æ–ø–∫–∞ Home
    let clickCount = 0;
    let clickTimer;

    if (homeButton) {
        homeButton.addEventListener("click", () => {
            clickCount++;

            if (clickCount === 1) {
                // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–≤–µ—Ä—Ö
                window.scrollTo({ top: 0, behavior: "smooth" });

                // –°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
                clickTimer = setTimeout(() => {
                    clickCount = 0;
                }, 1000);
            } else if (clickCount === 2) {
                // –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ ‚Äî –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                clearTimeout(clickTimer);
                location.reload();
            }
        });
    } else {
        console.error("‚ùå –û—à–∏–±–∫–∞: –ö–Ω–æ–ø–∫–∞ 'Home' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
    }
});
