// üîπ –ò–º–ø–æ—Ä—Ç Firebase üîπ
import { initializeApp } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js";
import { getFirestore, doc, collection, getDocs } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js";

// üîπ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Firebase üîπ
const firebaseConfig = {
    apiKey: "AIzaSyDqIDTQrS14wTLsh_jFkD0GZAmEEWW8TDk",
    authDomain: "cooker-62216.firebaseapp.com",
    projectId: "cooker-62216",
    storageBucket: "cooker-62216.firebasestorage.app",
    messagingSenderId: "994568659489",
    appId: "1:994568659489:web:18c15bc15fa5b723a03960"
};

// üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase üîπ
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

// üîπ –§–∏–ª—å—Ç—Ä—ã üîπ
let selectedType = null;
let selectedType2 = null;

// üîπ –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤ üîπ
async function loadRecipes() {
    const recipesContainer = document.getElementById("recipes-container");
    if (!recipesContainer) {
        console.error("‚ùå –û—à–∏–±–∫–∞: recipes-container –Ω–µ –Ω–∞–π–¥–µ–Ω!");
        return;
    }

    recipesContainer.innerHTML = ""; // –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
    console.log("üîπ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤...");

    const recipesQuery = collection(db, "rec");
    const querySnapshot = await getDocs(recipesQuery);
    let loadedRecipes = new Set();

    for (const recipeDoc of querySnapshot.docs) {
        const recipeId = recipeDoc.id;
        const recipeData = recipeDoc.data();
        const imageUrl = recipeData.image ? recipeData.image : "placeholder.jpg";

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
        const categoryDocRef = doc(db, "receptmain", recipeId);
        const categoryDocSnap = await getDocs(collection(db, "receptmain"));
        let type = null;
        let type2 = null;

        categoryDocSnap.forEach((doc) => {
            if (doc.id === recipeId) {
                type = doc.data().type || null;
                type2 = doc.data().type2 || null;
            }
        });

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        if ((selectedType && selectedType !== type) || (selectedType2 && selectedType2 !== type2)) {
            continue;
        }

        if (loadedRecipes.has(recipeId)) continue;
        loadedRecipes.add(recipeId);

        const recipeCard = document.createElement("div");
        recipeCard.classList.add("recipe-card");
        recipeCard.innerHTML = `
            <img src="${imageUrl}" class="recipe-img" alt="${recipeData.name}">
            <div class="recipe-info">
                <h3 class="recipe-title">${recipeData.name}</h3>
                <p class="recipe-description">${recipeData.dis}</p>
            </div>
            <a href="recipe.html?id=${recipeId}" class="recipe-link">
                <button class="start-button">–ù–∞—á–∞—Ç—å!</button>
            </a>
        `;

        recipesContainer.appendChild(recipeCard);
    }

    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤: ${loadedRecipes.size}`);
}

// üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ üîπ
const filterButtons = document.querySelectorAll(".filter-btn");
const categoryButtons = document.querySelectorAll(".category-btn");

filterButtons.forEach(button => {
    button.addEventListener("click", () => {
        selectedType = button.innerText === selectedType ? null : button.innerText;
        loadRecipes();
    });
});

categoryButtons.forEach(button => {
    button.addEventListener("click", () => {
        selectedType2 = button.querySelector("span").innerText === selectedType2 ? null : button.querySelector("span").innerText;
        loadRecipes();
    });
});

// üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã üîπ
document.addEventListener("DOMContentLoaded", loadRecipes);

// üîπ –ö–Ω–æ–ø–∫–∞ "Home" - —Å–∫—Ä–æ–ª–ª –≤–≤–µ—Ä—Ö –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ üîπ
const homeButton = document.querySelector(".nav-btn:first-child");
let lastClickTime = 0;

homeButton.addEventListener("click", () => {
    const currentTime = new Date().getTime();
    if (currentTime - lastClickTime < 1000) {
        location.reload();
    } else {
        window.scrollTo({ top: 0, behavior: "smooth" });
    }
    lastClickTime = currentTime;
});
