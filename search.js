import { db } from "./firebase-config.js";
import { collection, doc, getDoc } from "https://www.gstatic.com/firebasejs/10.8.0/firebase-firestore.js";

document.querySelector(".recipe-btn").addEventListener("click", async () => {
    const userProducts = Array.from(document.querySelectorAll("#product-list input[type='text']"))
        .map(input => input.value.trim().toLowerCase())
        .filter(value => value !== "");

    console.log("üõí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª:", userProducts);

    if (userProducts.length === 0) {
        alert("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç!");
        return;
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –∏–∑ Firestore
    const recipesRef = collection(db, "rec"); // –ö–æ–ª–ª–µ–∫—Ü–∏—è —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏
    const querySnapshot = await getDocs(recipesRef);
    let matchingRecipes = [];

    querySnapshot.forEach(async (docSnap) => {
        const recipeId = docSnap.id; // ID —Ä–µ—Ü–µ–ø—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, recept0)
        const recipeData = docSnap.data();

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã —Ä–µ—Ü–µ–ø—Ç–∞
        const prodRef = doc(db, `rec/${recipeId}/receptmain${recipeId.replace('recept', '')}`, "prod");
        const prodSnap = await getDoc(prodRef);

        if (prodSnap.exists()) {
            const recipeProducts = Object.values(prodSnap.data()).map(p => p.toLowerCase());
            console.log(`üìñ –ü—Ä–æ–¥—É–∫—Ç—ã –≤ ${recipeId}:`, recipeProducts);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ä–µ—Ü–µ–ø—Ç —Ç–æ–ª—å–∫–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
            if (recipeProducts.every(prod => userProducts.includes(prod))) {
                matchingRecipes.push(recipeId);
            }
        }
    });

    setTimeout(() => console.log("‚úÖ –ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã:", matchingRecipes), 2000);
});

// üìù –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã, –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
function getUserProducts() {
    return Array.from(document.querySelectorAll("#product-list input"))
        .map(input => input.value.trim().toLowerCase())
        .filter(value => value !== "");
}

// üîç –ò—â–µ–º —Ä–µ—Ü–µ–ø—Ç—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function findMatchingRecipes(userProducts) {
    const recipes = [];
    const querySnapshot = await getDocs(collection(db, "rec"));

    querySnapshot.forEach(doc => {
        const recipeId = doc.id;
        const recipeProducts = Object.values(doc.data().prod || {}).map(p => p.toLowerCase());

        if (isSubset(recipeProducts, userProducts)) {
            recipes.push(recipeId);
        }
    });

    return recipes;
}

// ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Ä–µ—Ü–µ–ø—Ç–∞ –≤—Ö–æ–¥—è—Ç –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function isSubset(recipeProducts, userProducts) {
    return recipeProducts.every(product => userProducts.includes(product));
}

// üìå –í—ã–≤–æ–¥–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã
function displayRecipes(recipes) {
    const container = document.getElementById("recipe-list") || createRecipeListContainer();
    container.innerHTML = recipes.length
        ? recipes.map(id => `<p>–†–µ—Ü–µ–ø—Ç: ${id}</p>`).join("")
        : "<p>–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤</p>";
}
console.log(`üìå –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ü–µ–ø—Ç—ã...`);
for (let i = 0; i <= 9; i++) {
    const docRef = doc(db, "rec", `recept${i}`, "receptmain", `${i}`);
    const docSnap = await getDoc(docRef);
    if (docSnap.exists()) {
        const recipeProducts = Object.values(docSnap.data().prod || {});
        console.log(`üìñ recept${i} —Å–æ–¥–µ—Ä–∂–∏—Ç:`, recipeProducts);
    }
}
// üîß –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç)
function createRecipeListContainer() {
    const container = document.createElement("div");
    container.id = "recipe-list";
    document.body.appendChild(container);
    return container;
}
